
                            ######################################
                            Example 1 : Unit Test using JUnit
                            #####################################

STEP-1 : CREATE A JAVA CLASS CALCULATOR IN Dto package in main package.
------------------------------------------------------------------------

package com.app.dto;

public class Calculator {

    public int add(int x,int y) {
        return x+y;
    }

    public int mul(int x,int y) {
        return x*y;
    }
}


STEP-2 : CREATE A JAVA TEST CLASS CALCULATOR IN test package.
------------------------------------------------------------------------

package com.app;

import com.app.dto.Calculator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class CalculatorTest {


    @Test
    public void testAdd(){
        Calculator calculator = new Calculator();
       int actual= calculator.add(10,20);
        int expected = 30;

        Assertions.assertEquals(expected,actual);
    }


    @Test
    public void testMul(){
        Calculator calculator = new Calculator();
        int actual= calculator.mul(5,6);
        int expected = 30;

        Assertions.assertEquals(expected,actual);
    }
}



#####################################################
           Integrate Jacoco plugin
######################################################

<plugin>
	<groupId>org.jacoco</groupId>
	<artifactId>jacoco-maven-plugin</artifactId>
	<version>0.8.11</version>
	<configuration>
		<excludes>
		<exclude>com/app/Unit**</exclude>
		</excludes>
	</configuration>
	<executions>
		<execution>
			<goals>
				<goal>prepare-agent</goal>
			</goals>
		</execution>
		<execution>
			<id>report</id>
			<phase>test</phase>
			<goals>
				<goal>report</goal>
			</goals>
		</execution>
	</executions>
</plugin>

Note: to see how much code tested open target -> site -> jacoco -> index.html (copy path and open in browser)


                                    ######################################################################################################################################
                                    Example 2 : Unit Test for UserController using JUnit 5 + Mockito WITHOUT ResponseEntity but with @ExtendWith(MockitoExtension.class)
                                    #######################################################################################################################################

-----------------------------------------
testing the UserController in isolation
----------------------------------------

Explanation of code ?
----------------------

What is being tested?
-> You are testing the UserController in isolation.

How is it isolated?
-> The real UserService is not being used. Instead, you provide a mock (@Mock) of UserService. So the controllerâ€™s logic is tested without depending on database, repository, or Spring context.



Entity :=> 

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
}



Controller :=>

@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService service;

    public UserController(UserService service) {
        this.service = service;
    }


    @GetMapping("/{id}")
    public String getUserName(@PathVariable int id) {
        return service.getUserName(id);
    }
}



service :=>

@Service
public class UserService {

    private final UserRepository repository;

    public UserService(UserRepository repository) {
        this.repository = repository;
    }
    
    public String getUserName(int id) {
        Optional<User> user = repository.findById(id);
        if (user.isPresent()) {
            return user.get().getName();
        } else {
            return "Unknown User";
        }
    }
}


repository :=>

public interface UserRepository extends JpaRepository<User,Integer> {
}



testController :=>

import com.app.controller.UserController;
import com.app.service.UserService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class UserControllerTest {

    // service dummy object created
    @Mock
    private UserService mockService;


    // done dependency injection constructor based
    @InjectMocks
    private UserController userController;
    

    @Test
    public void testGetUser_Found(){
        // Mock service call
        when(mockService.getUserName(1)).thenReturn("sahil");

        // Call controller method
        String result = userController.getUserName(1);

        // Assert result
        assertEquals("sahil", result);

        // Verify service interaction
        verify(mockService, times(1)).getUserName(1);
    }



    @Test
    void testGetUserName_NotFound() {
        when(mockService.getUserName(2)).thenReturn("Unknown User");

        String result = userController.getUserName(2);

        assertEquals("Unknown User", result);

        verify(mockService, times(1)).getUserName(2);
    }
}


--------------------------------------------------------------------------------------------
Unit Test for UserController (Manual Mockito Mocking) without @ExtendWith annotations :
-------------------------------------------------------------------------------------------

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class UserControllerTest {

    @Test
    void testGetUserName_Found() {
        // Create mock manually
        UserService mockService = mock(UserService.class);

        // Define behavior
        when(mockService.getUserName(1)).thenReturn("Alice");

        // Inject into controller manually
        UserController controller = new UserController(mockService);

        // Call method & assert
        assertEquals("Alice", controller.getUserName(1));

        // Verify interaction
        verify(mockService, times(1)).getUserName(1);
    }

    @Test
    void testGetUserName_NotFound() {
        // Create mock manually
        UserService mockService = mock(UserService.class);

        // Define behavior
        when(mockService.getUserName(2)).thenReturn("Unknown User");

        // Inject into controller manually
        UserController controller = new UserController(mockService);

        // Call method & assert
        assertEquals("Unknown User", controller.getUserName(2));

        // Verify interaction
        verify(mockService, times(1)).getUserName(2);
    }
}




                                                  #####################################################################
                                                   Example 3  : Unit Tests for UserService with Mocked UserRepository
                                                  ######################################################################

-----------------------------------------
testing the userService in isolation
----------------------------------------

Note: use same above code for user-service-test class


@ExtendWith(MockitoExtension.class)
public class UserServiceTest {

    @Mock
    private UserRepository repository;

    @InjectMocks
    private UserService service;

    @Test
    public void testGetUsername_Found(){
        // Arrange
        when(repository.findById(1)).thenReturn(Optional.of(new User(1,"sahil")));

        // Act
       String name= service.getUserName(1);

       // Assert
        assertEquals("sahil",name);

        // Verify that repository.findById() was called exactly once with argument 1
        verify(repository,times(1)).findById(1);
    }


    @Test
    public void testGetUsername_NotFound(){
     when(repository.findById(2)).thenReturn(Optional.empty());
     String name = service.getUserName(2);
     assertEquals("Unknown User",name);
        verify(repository,times(1)).findById(2);
    }
}





                                                  #################
                                                   Example 4
                                                  #################

------------------------------------------------------------
Testing RestControllers like real HTTP requests/responses.
------------------------------------------------------------

Application.properties Files :


spring.application.name=mvc_unit_test

spring.datasource.url=jdbc:mysql://localhost:3306/db1
spring.datasource.username=root
spring.datasource.password=test
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true



Entitiy class :

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
}


Controller class : 


@RestController
@RequestMapping("/users")
public class UserController {
    private final UserService service;

    public UserController(UserService service) { // constructor-based DI
        this.service = service;
    }

    @GetMapping("/{id}")
    public ResponseEntity<String> getUserName(@PathVariable int id) {
        String name = service.getUserName(id);
        if ("Unknown User".equals(name)) {
            return ResponseEntity.notFound().build();      // 404
        }
        return ResponseEntity.ok(name);                    // 200
    }

    @PostMapping
    public ResponseEntity<User> create(@RequestBody User user) {
        User created = service.createUser(user);
        return ResponseEntity.status(201).body(created);   // 201
    }

    @PutMapping("/{id}")
    public ResponseEntity<User> update(@PathVariable int id, @RequestBody User user) {
        Optional<User> updated = service.updateUser(id, user);
        return updated.map(ResponseEntity::ok)              // 200
                .orElseGet(() -> ResponseEntity.notFound().build()); // 404
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable int id) {
        boolean deleted = service.deleteUser(id);
        return deleted ? ResponseEntity.noContent().build() // 204
                : ResponseEntity.notFound().build(); // 404
    }

    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = service.findAllUsers();

        if (users.isEmpty()) {
            // Return HTTP 204 No Content
            return ResponseEntity.noContent().build();
        }

        // Return HTTP 200 OK with the list
        return ResponseEntity.ok(users);
    }
}



service class : 

@Service
public class UserService {
    private final UserRepository repository;

    public UserService(UserRepository repository) { // constructor-based DI
        this.repository = repository;
    }

    public String getUserName(int id) {
        return repository.findById(id).map(User::getName).orElse("Unknown User");
    }

    public User createUser(User user) {
        return repository.save(user);
    }

    public Optional<User> updateUser(int id, User user) {
        return repository.findById(id).map(existing -> repository.save(new User(id, user.getName())));
    }

    public boolean deleteUser(int id) {
        if (repository.findById(id).isPresent()) {
            repository.deleteById(id);
            return true;
        }
        return false;
    }

    public List<User> findAllUsers() {
        return repository.findAll();
    }

}


Repository interface  :

public interface UserRepository extends JpaRepository<User,Integer> {
}


Now Test class for UserControllerWebMvcTest  : 

















