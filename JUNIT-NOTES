ðŸ”¹ 1. Basics of Testing  :
----------------------------

Q1. What is software testing?
ðŸ‘‰ Software testing is the process of verifying that a software application works as expected and is free of defects.

Q2. Why is testing important?
- Ensures quality of software
- Finds bugs early (cost of fixing later is higher)
- Improves reliability and performance
- Builds customer confidence

Q3. What are the main types of testing?
 a. Manual Testing â€“ tester executes test cases manually.
 b. Automation Testing â€“ tests are automated using tools/frameworks.

Q4. What are different levels of testing (both manual/automation testing)?
  a. Unit Testing â†’ testing individual components (e.g., a method/class).
  b. Integration Testing â†’ testing interaction between components.
  c. System Testing â†’ testing the whole system end-to-end.
  d. Acceptance Testing (UAT) â†’ testing if it meets business needs.


ðŸ”¹ 2. Unit Testing :
---------------------

Q1. What is Unit Testing?
ðŸ‘‰ Unit testing is testing a smallest unit of software (like a method/class) in isolation from the rest of the system.

Q2. Who performs unit testing?
ðŸ‘‰ Developers, usually during development phase.

Q3. What are the types of unit testing?
  a. Manual Unit Testing (rare in real life)
  b. Automated Unit Testing (JUnit, TestNG, etc.)

Q4. What are the advantages of unit testing?
 - Catches bugs early
 - Makes refactoring safe
 - Improves design (loosely coupled, testable code)
 - Acts as documentation of code behavior

Q5. Difference between Unit Testing and Integration Testing?
  - Unit Testing â†’ test single component, dependencies are mocked.
  - Integration Testing â†’ test multiple components working together.

ðŸ”¹ 3. JUnit (Java Unit Testing Framework) :
--------------------------------------------

Q1. What is JUnit?
ðŸ‘‰ JUnit is a testing framework in Java for writing unit tests.

Q2. Which version of JUnit does Spring Boot use?
ðŸ‘‰ JUnit 5 (Jupiter) by default.

Q3. What are the main JUnit annotations?
-  @Test â†’ test method
-  @BeforeEach / @AfterEach â†’ run before/after each test
-  @BeforeAll / @AfterAll â†’ run once before/after all tests
-  @Disabled â†’ disable a test
-  @DisplayName â†’ give custom test name

Q4. How do you test exceptions in JUnit?
assertThrows(IllegalArgumentException.class, () -> {
    service.doSomething(-1);
});

Q5. Difference between JUnit 4 and JUnit 5?
- JUnit 4 â†’ @Before, @After, @BeforeClass, @AfterClass
- JUnit 5 â†’ @BeforeEach, @AfterEach, @BeforeAll, @AfterAll
- JUnit 5 modular + supports Java 8 features


ðŸ”¹ 4. Mockito (Mocking Framework)  :
--------------------------------------

Q1. What is Mockito?
ðŸ‘‰ Mockito is a framework used to create mock objects for dependencies, so you can test a class in isolation.

Q2. Why do we use Mockito in unit testing?
ðŸ‘‰ To avoid hitting real DB, API, or external systems â†’ only test business logic.

Q3. Difference between @Mock and @InjectMocks?
- @Mock â†’ creates mock objects.
- @InjectMocks â†’ injects those mocks into the class under test.

Q4. Difference between mock() and spy()?
- mock() â†’ fake object (all methods return defaults unless stubbed).
- spy() â†’ wraps real object (can call real methods).

Q5. How do you verify interactions in Mockito?
verify(userRepository, times(1)).save(any(User.class));

Q6. How do you mock static methods?
ðŸ‘‰ From Mockito 3.4+ using mockStatic().

Q7. Difference between @Mock and @MockBean?
- @Mock â†’ pure Mockito mock.
- @MockBean â†’ Spring Boot mock, also registered in ApplicationContext.



ðŸ”¹ 5. JaCoCo (Code Coverage Tool) :
------------------------------------

Q1. What is JaCoCo?
ðŸ‘‰ JaCoCo is a Java Code Coverage tool that measures how much code is executed during tests.

Q2. Types of coverage provided by JaCoCo?
- Line coverage
- Branch coverage
- Instruction coverage

Q3. How to configure JaCoCo in Maven?
ðŸ‘‰ Add jacoco-maven-plugin in pom.xml.

Q4. What is a good coverage percentage?
ðŸ‘‰ Around 70â€“80%, but quality of tests is more important.

Q5. Can JaCoCo measure test quality?
ðŸ‘‰ No, only test coverage (lines executed). Correctness depends on assertions.



ðŸ”¹ 6. Practical + Best Practices  :
-------------------------------------

Q1. What should you test in unit testing?
ðŸ‘‰ Business logic, utility functions, services.

Q2. What should you not test?
ðŸ‘‰ Framework code (Spring annotations), configuration, logging.

Q3. Common mistakes in JUnit + Mockito?
- Forgetting @ExtendWith(MockitoExtension.class)
- Overusing mocks
- Not verifying interactions
- Mocking static/final methods incorrectly

Q4. What is the difference between Unit Test, Integration Test, and Functional Test?
- Unit Test â†’ one class in isolation
- Integration Test â†’ multiple classes/modules working together
- Functional Test â†’ end-to-end feature working as per requirement
























